<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.temenos.interaction</groupId>
		<artifactId>com.temenos.interaction.rimdsl.parent</artifactId>
		<!-- You should change this and the MANIFEST.MF to your versioning scheme -->
		<version>201805.0.0</version>
		<relativePath>../com.temenos.interaction.rimdsl.parent/pom.xml</relativePath>
	</parent>

	<artifactId>com.temenos.interaction.rimdsl.tests</artifactId>
	<packaging>eclipse-test-plugin</packaging>

	<dependencies>
		<!-- TEST DEPENDENCIES -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
    	<dependency>
    		<groupId>com.temenos.interaction</groupId>
    		<artifactId>interaction-core</artifactId>
    		<type>jar</type>
    		<scope>compile</scope>
   	        <version>${project.version}</version>
	    </dependency>
	</dependencies>

	<build>
		<sourceDirectory>src</sourceDirectory>
		<plugins>
			<!-- Do not clean all the src-gen folder, therefore we remove all paths from 
				the default configuration in the parent pom. Note the combine.self="override" 
				statement -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets combine.self="override">
						<fileset>
							<directory>${basedir}/src-gen</directory>
							<includes>
								<!-- We do want to delete the source generated by the RIM plugin if it is installed in Eclipse -->
								<include>*/**</include>
							</includes>                            
							<excludes>
								<exclude>com/**</exclude>
								<exclude>.gitignore</exclude>
							</excludes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.eclipse.xtend</groupId>
				<artifactId>xtend-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- The unit tests do not have to be executed as plugin-test, there use 
				the default maven surefire plugin and disable the tycho plug-in -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<inherited>true</inherited>
				<executions>
					<execution>
						<id>test</id>
						<phase>test</phase>
						<configuration>
							<excludes>
								<exclude>**/Abstract*</exclude>
							</excludes>
							<forkMode>once</forkMode>
							<reportFormat>xml</reportFormat>
							<testClassesDirectory>target/classes</testClassesDirectory>
						</configuration>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-compiler-plugin</artifactId>
					<configuration>
						<compilerArgument>-warn:+discouraged,forbidden</compilerArgument>
					</configuration>
				</plugin>			
			<!--  Skip the deployment -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>  
		</plugins>
	</build>

<!-- SONAR TEST COVERAGE PROFILE-->
   <profiles>
    <profile>
        <id>coverage</id>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.13</version>
                    <configuration>
                        <argLine>${jacoco.agent.ut.arg}</argLine>
                        <!-- Specific to generate mapping between tests and covered code -->
                        <properties>
                            <property>
                                <name>listener</name>
                                <value>org.sonar.java.jacoco.JUnitListener</value>
                            </property>
                        </properties>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.16</version>
                    <configuration>
                        <argLine>-Xmx1024m -XX:MaxPermSize=256m ${jacoco.agent.it.arg}</argLine>
                        <!-- Specific to generate mapping between tests and covered code -->
                        <properties>
                            <property>
                                <name>listener</name>
                                <value>org.sonar.java.jacoco.JUnitListener</value>
                            </property>
                        </properties>
                        <!-- Let's put failsafe reports with surefire to have access to tests failures/success reports in sonar -->
                        <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.version}</version>
                    <executions>
                        <!-- Prepares a variable, jacoco.agent.ut.arg, that contains the info to be passed to the JVM hosting the code
being tested. -->
                        <execution>
                            <id>prepare-ut-agent</id>
                            <phase>process-test-classes</phase>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                            <configuration>
                                <destFile>${sonar.jacoco.reportPath}</destFile>
                                <propertyName>jacoco.agent.ut.arg</propertyName>
                                <append>true</append>
                            </configuration>
                        </execution>
                        <!-- Prepares a variable, jacoco.agent.it.arg, that contains the info to be passed to the JVM hosting the code
being tested. -->
                        <execution>
                            <id>prepare-it-agent</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                            <configuration>
                                <destFile>${sonar.jacoco.itReportPath}</destFile>
                                <propertyName>jacoco.agent.it.arg</propertyName>
                                <append>true</append>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>
        <dependencies>
            <dependency>
                <groupId>org.codehaus.sonar-plugins.java</groupId>
                <artifactId>sonar-jacoco-listeners</artifactId>
                <version>${sonar-jacoco-listeners.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.codehaus.sonar-plugins.java</groupId>
                <artifactId>sonar-jacoco-plugin</artifactId>
                <version>${sonar-jacoco-plugin.version}</version>
            </dependency>
        </dependencies>
    </profile>
</profiles>
	
</project>
